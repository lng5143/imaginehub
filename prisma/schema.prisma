datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
enum UserTier {
  FREE
  PAID
}

enum ImageGenerationStatus {
  PENDING
  PROCESSING
  SUCCESS
  ERROR
}

enum DallEQuality {
  standard
  hd
}

enum Provider {
  stability
  openai
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  tier          UserTier        @default(FREE)
  accounts      Account[]
  imageGenerations ImageGeneration[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model ImageGeneration {
  id                String          @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  model             String
  prompt            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  images            Image[]   
  samples           Int
  status            ImageGenerationStatus
  provider          Provider
  de_quality        DallEQuality?
  de_size           String?
  sd_negativePrompt String?
  sd_seed           Int?
  sd_aspectRatio    String?
  sd_stylePreset    String?
}

model Image {
  id         String          @id @default(cuid())
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  imageGeneration ImageGeneration @relation(fields: [imageGenerationId], references: [id], onDelete: Cascade)
  imageGenerationId String
}